#include <ESP8266WiFi.h>
#include <PubSubClient.h>

const char* ssid = "agents";
const char* password = "NVucvZu5R9QgCzzYvaHqqOM8AVruv26cV75kByq5diJ6v07D23KG4El801zdpbG";
const char* mqtt_server = "10.20.38.60";

#define LED D0
#define return D7 //13
#define pulse D8 //15

WiFiClient espClient;
PubSubClient client(espClient);
long lastMsg = 0;
char msg[50];
int value = 0;

void setup_wifi() {

  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  randomSeed(micros());

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();

  // Switch on the LED if an 1 was received as first character
  if ((char)payload[0] == '1') {
    digitalWrite(LED, LOW);   // Turn the LED on (Note that LOW is the voltage level
    // but actually the LED is on; this is because
    // it is active low on the ESP-01)
  } else {
    digitalWrite(LED, HIGH);  // Turn the LED off by making the voltage HIGH
  }

}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    String clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    if (client.connect(clientId.c_str())) {
      Serial.println("connected");
      client.subscribe("cm/AulaPratica/Led");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

void setup() {
  pinMode(pulse, OUTPUT);     // Initialize the BUILTIN_LED pin as an output
  pinMode(return, INPUT);  
  digitalWrite(pulse, LOW);
  Serial.begin(115200);
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
}

void loop() {
  long t;
  long d;
  if (!client.connected()) {
    reconnect();
  }
  client.loop();
  digitalWrite(pulse,HIGH); //Pulse send
  delayMicroseconds(10);
  digitalWrite(return,LOW);

  t=pulseIn(pulse,HIGH); //The time in which we receive the bounce pulse
  d=0.01716*t; //Distance. We use the speed of sound divided by 2 (the pulse has to go and return, and we are calculating only with the time of return) and multiplied by the time of return

  Serial.println("Distance (cm): ");
  Serial.println(d);
  snprintf (msg, 50, "%ld", d);
  Serial.print("Publish message: ");
  Serial.println(msg);
  client.publish("cm/AulaPratica/Dist", msg);
  delay(2000);
}








